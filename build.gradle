plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.7"
    id "jacoco"
}

apply plugin: 'io.spring.dependency-management'

group = 'jp.co.kelly'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop' // aspect使いたい

    // Database
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // feature flag for java
//    compile 'org.ff4j:ff4j-core:1.8.1'
//    compile 'org.ff4j:ff4j-web:1.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // xmlunitで特定の項目を無視したければ、このライブラリを使う。
    testImplementation 'org.xmlunit:xmlunit-core:2.7.0'
    testImplementation 'org.xmlunit:xmlunit-placeholders:2.7.0'

    testImplementation 'com.codeborne:selenide:5.2.3'
    testImplementation 'io.cucumber:cucumber-java:4.3.1'
    testImplementation 'io.cucumber:cucumber-junit:4.3.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
}

test {
//    maxParallelForks = Runtime.runtime.availableProsessors()
    maxParallelForks = 4
    forkEvery = 4

    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "hirotoKirimaru_cucumber-sample"
        property "sonar.organization", "hirotokirimaru-github"
        property "sonar.login", "7a3d5a80c3619dce9eef1efa9d4e9b9fbf0b9f83"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

/**
 * cucumberを動かすタスク
 * @developing タグは無視する設定
 */
task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--tags', '~@developing', '--glue', 'features', 'src/test/resources']
        }
    }
}

/**
 * cucumberのタグ：@nowだけ動かすタスク
 * @developing タグは無視する
 */
task cucumberNow() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--tags', '@now', '--tags', '~@developing', '--glue', 'features', 'src/test/resources']
        }
    }
}
